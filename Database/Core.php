<?php
/**
 * combined core files for Database extension (with comments stripped)
 *
 * includes Async.php, Database.php, Exception.php, Factory.php, MySql/Exception.php, MySql/Statement.php, MySql.php, MySqli/Exception.php, MySqli/Statement.php, MySqli.php, Query/Filter/Iterator.php, Query/Filter.php, Query/Sort.php, Query.php, QueryAsync.php, QueryCached.php
 *
 * @category Sonic
 * @package Database
 * @author Craig Campbell <iamcraigcampbell@gmail.com>
 * @version 1.0
 *
 * generated: 2011-03-06 21:36:20 EST
 */
namespace Sonic\Database {
    use Sonic\App, MySql\Statement, MySqli\Statement, Query\Filter, Query\Sort, Sonic\Util;
    class Async{const FETCH_ROW=1;const FETCH_ALL=2;const FETCH_VALUE=3;const EXECUTE=4;protected $_queries=array();protected $_results;public function addQuery(Query $query){if($this->_results!==null&&count($this->_results)==count($this->_queries)){$this->_queries=array();$this->_results=null;}$this->_queries[]=$query;}protected function _useAsync(){if(App::getInstance()->extension('Database')->getSetting(Sonic\Database::DRIVER)!=Sonic\Database::MYSQLI){return false;}if(count($this->_queries) < 2){return false;}return true;}public function fetchResults(){if($this->_results!==null){return $this->_results;}if(!$this->_useAsync()){throw new Query\Exception('not in async mode. use Async::fetchResultsForQuery() instead');}$results=array();$all_links=$this->_getLinksFromQueries($this->_queries);$processed=0;while ($processed < count($all_links)){$links=$errors=$reject=array();foreach ($all_links as $link){$links[]=$errors[]=$reject[]=$link;}if(!mysqli_poll($links,$errors,$reject,1)){continue;}foreach ($links as $link){if(!$result=mysqli_reap_async_query($link)){continue;}$results[]=$result;++$processed;}} $this->_results=$results;unset($results);return $this->_results;}public function fetchResultsForQuery(Query $query,$fetch_mode=self::FETCH_ALL){if(!$this->_useAsync()){return $this->_getResultFromQuery($query,$fetch_mode);}$key=array_search($query,$this->_queries);if($key===false){if($fetch_mode==self::FETCH_ALL){return array();}return null;}$results=$this->fetchResults($fetch_mode);$result=$this->_getResultFromFetchMode($results[$key],$fetch_mode);mysqli_free_result($results[$key]);return $result;}protected function _getResultFromFetchMode(\mysqli_result $result,$fetch_mode){switch ($fetch_mode){case self::FETCH_ROW: return mysqli_fetch_assoc($result);break;case self::FETCH_VALUE: $row=mysqli_fetch_assoc($result);return array_pop($row);break;case self::EXECUTE: break;default: $field_count=mysqli_num_fields($result);$rows=array();while ($row=mysqli_fetch_assoc($result)){$rows[]=$field_count==1 ? array_pop($row) : $row;}return $rows;break;}} protected function _getResultFromQuery(Query $query,$fetch_mode){switch ($fetch_mode){case self::FETCH_VALUE: return $query->fetchValue();break;case self::FETCH_ALL: return $query->fetchAll();break;case self::FETCH_ROW: return $query->fetchRow();break;case self::EXECUTE: return $query->execute();break;}} protected function _getLinksFromQueries(array $queries){$links=array();foreach ($queries as $query){$links[]=$this->_getLinkFromQuery($query);}return $links;}protected function _getLinkFromQuery(Query $query){$params=$query->getBoundParams();$statement=$query->getStatement();foreach ($params as $key=>$value){$statement->bindValue($key,$value);}$statement->execute(MYSQLI_ASYNC);return $statement->getLink();}} class Exception extends \Sonic\Exception {} class Factory{protected static $_databases=array();protected static $_servers=array();public static function getDatabase($schema=null){if(!isset(self::$_databases[$schema])){self::$_databases[$schema]=new \Sonic\Database($schema);}return self::$_databases[$schema];}public static function getServers($schema){if(isset(self::$_servers[$schema])){return self::$_servers[$schema];}$app=App::getInstance();$config=$app->extension('Database')->getConfig();if(!$servers=$config->get('db.'.$schema)){throw new Exception('no database found matching schema: '.$schema);}$user=$config->get('db.'.$schema.'.user');$password=$config->get('db.'.$schema.'.password');self::$_servers[$schema]=array();foreach ($servers as $server){$data=self::_parseDsn($server,$schema);$data['user']=$user;$data['password']=$password;self::$_servers[$schema][]=$data;}return self::$_servers[$schema];}protected static function _parseDsn($dsn,$schema){$bits=explode(':',$dsn);$vars=isset($bits[1]) ? $bits[1] : $bits[0];$vars=explode(';',$vars);$server=array();foreach ($vars as $var){$bits=explode('=',$var);$server[$bits[0]]=$bits[1];}if(!isset($server['weight'])) $server['weight']=null;$server['dsn']='mysql:dbname='.$schema.';host='.$server['host'];return $server;}} class MySql{const FETCH_NUM=1;const FETCH_ASSOC=2;const FETCH_CLASS=3;const ATTR_ERRMODE=4;const ERRMODE_EXCEPTION=5;const ATTR_CASE=6;const CASE_LOWER=7;const ATTR_EMULATE_PREPARES=8;protected $_attributes=array();protected $_dsn;protected $_host;protected $_dbname;protected $_user;protected $_password;protected $_link;public function __construct($dsn,$user,$password){$this->_dsn=$dsn;$this->_user=$user;$this->_password=$password;$dsn=$this->_parseDsn($dsn);$this->_dbname=$dsn['dbname'];$this->_host=$dsn['host'];}public function prepare($sql){if($this->_link===null){$this->_link=mysql_connect($this->_host,$this->_user,$this->_password,true);if(!$this->_link){throw new Exception(mysql_error());}mysql_select_db($this->_dbname,$this->_link);}return new Statement($sql,$this->_link);}public function setAttribute($key,$value){$this->_attributes[$key]=$value;}protected function _parseDsn($dsn){$bits=explode(':',$dsn);$vars=isset($bits[1]) ? $bits[1] : $bits[0];$vars=explode(';',$vars);$server=array();foreach ($vars as $var){$bits=explode('=',$var);$server[$bits[0]]=$bits[1];}return $server;}public function lastInsertId(){return mysql_insert_id($this->_link);}} class MySqli extends MySql{public function prepare($sql){if($this->_link===null){$this->_link=mysqli_connect($this->_host,$this->_user,$this->_password);if(!$this->_link){throw new Exception(mysqli_connect_error());}mysqli_select_db($this->_link,$this->_dbname);}return new Statement($sql,$this->_link);}public function lastInsertId(){return mysqli_insert_id($this->_link);}} class Query{protected $_schema;protected $_sql;protected $_binds=array();protected $_executed=false;protected $_statement;protected $_filter;protected $_sort;public function __construct($sql,$schema=null){if(!$sql){throw new Exception('you need to pass in sql to be executed!');}$this->_sql=$sql;$this->_schema=$schema;}protected function _getClass(){return Database::getDriverClass();}public function getSql(){return $this->_sql;}public function getBinds(){return $this->_binds;}public function getStatement(){if($this->_statement!==null){return $this->_statement;}$database=Factory::getDatabase($this->_schema);$this->_statement=$database->prepare($this->_sql);return $this->_statement;}public function lastInsertId(){return (int) Factory::getDatabase($this->_schema)->getPdo(Database::MASTER)->lastInsertId();}public function getBoundParams(){return $this->_binds;}public function execute(){$this->_executed=true;$statement=$this->getStatement();foreach ($this->_binds as $key=>$value){$statement->bindValue($key,$value);}try{$result=$statement->execute();}catch (\Exception $e){throw new Exception($e->getMessage());}return $result;}public function fetchValue(){if(!$this->_executed){$this->execute();}$class=$this->_getClass();$row=$this->getStatement()->fetch($class::FETCH_NUM);return $row[0];}public function fetchRow(){if(!$this->_executed) $this->execute();$class=$this->_getClass();return $this->getStatement()->fetch($class::FETCH_ASSOC);}protected function _fetchAll(){if(!$this->_executed){$this->execute();}$class=$this->_getClass();$results=$this->getStatement()->fetchAll($class::FETCH_ASSOC);if($this->getStatement()->columnCount()!=1){return $results;}$new_results=array();foreach ($results as $result) $new_results[]=array_pop($result);return $new_results;}public function fetchAll(){$results=$this->_fetchAll();$results=$this->_filter($results);$results=$this->_sort($results);return $results;}public function fetchIds(){$all_data=$this->fetchAll();if(count($all_data)==0){return array();}if(!isset($all_data[0]['id'])){return $all_data;}$ids=array();foreach ($all_data as $data){$ids[]=(int) $data['id'];}return $ids;}public function fetchObject($class){if(!$this->_executed){$this->execute();}return $this->getStatement()->fetchObject($class);}public function fetchObjects($class){if(!$this->_executed){$this->execute();}$const_class=$this->_getClass();$statement=$this->getStatement();$statement->setFetchMode($const_class::FETCH_CLASS,$class);return $statement->fetchAll();}public function bindValue($key,$value){if(array_key_exists($key,$this->_binds)){throw new Exception('You have already bound '.$key.' to this query.');}$this->_binds[$key]=$value;return $this;}public function filter($pattern,$args=null){if($this->_filter===null){$this->_filter=new Filter();}$this->_filter->addPattern($pattern,$args);return $this;}public function sort($column,$direction,$preserve_data=false){if($this->_sort===null){$this->_sort=new Sort();}$this->_sort->add($column,$direction,$preserve_data);return $this;}protected function _filter($data){if($this->_filter===null){return $data;}return $this->_filter->process($data);}protected function _sort($data){if($this->_sort===null){return $data;}return $this->_sort->process($data);}} class QueryAsync{protected static $_async;protected $_query;public function __construct($sql,$schema=null){$query=new Query($sql,$schema);$this->_query=$query;$this->_getAsync()->addQuery($query);}protected function _getAsync(){if(self::$_async===null){self::$_async=new Async();}return self::$_async;}public function bindValue($key,$value){return $this->_query->bindValue($key,$value);}public function fetchAll(){return $this->_getAsync()->fetchResultsForQuery($this->_query,Async::FETCH_ALL);}public function fetchRow(){return $this->_getAsync()->fetchResultsForQuery($this->_query,Async::FETCH_ROW);}public function fetchValue(){return $this->_getAsync()->fetchResultsForQuery($this->_query,Async::FETCH_VALUE);}public function execute(){return $this->_getAsync()->fetchResultsForQuery($this->_query,Async::EXECUTE);}} class QueryCached extends Query{protected $_cache_key;protected $_cache_time;protected $_in_cache;protected $_cached_value;protected $_cache_pool='default';public function __construct($sql,$cache_key,$time=7200,$schema=null){parent::__construct($sql,$schema);$this->_cache_key=$cache_key;$app=App::getInstance();if(!$app->extensionLoaded('Cache')){throw new Exception('QueryCached depends on the Cache extension. It is not currently loaded.');}$app->includeFile('Sonic/Util.php');$this->_cache_time=Util::toSeconds($time);}public function setCachePool($pool){$this->_cache_pool=$pool;}public function wasInCache(){if($this->_in_cache!==null){return $this->_in_cache;}$cache=App::getMemcache($this->_cache_pool);$data=$cache->get($this->_cache_key);if($data===false){$this->_in_cache=false;return false;}$this->_cached_value=$data;$this->_in_cache=true;return true;}protected function _cache($data){App::getMemcache($this->_cache_pool)->set($this->_cache_key,$data,$this->_cache_time);$this->_cached_value=$data;}public function fetchValue(){if(!$this->wasInCache()){$this->_cache(parent::fetchValue());}return $this->_cached_value;}public function fetchRow(){if(!$this->wasInCache()){$this->_cache(parent::fetchRow());}return $this->_cached_value;}public function fetchObject($class){if(!$this->wasInCache()){$this->_cache(parent::fetchObject($class));}return $this->_cached_value;}public function fetchAll(){if(!$this->wasInCache()){$this->_cache(parent::_fetchAll());}$results=$this->_cached_value;$results=$this->_filter($results);$results=$this->_sort($results);return $results;}} 
}
namespace Sonic {
    use Sonic\App;
    class Database{const INT='int';const TINY_INT='tinyint';const VARCHAR='varchar';const ENUM='enum';const DATETIME='datetime';const TEXT='text';const MEDIUM_TEXT='mediumtext';const LONG_TEXT='longtext';const FLOAT='float';const MASTER='master';const SLAVE='slave';const READ='read';const WRITE='write';const DRIVER='driver';const DEFAULT_SCHEMA='default_schema';const PDO='pdo';const MYSQL='mysql';const MYSQLI='mysqli';protected $_schema;protected $_connections=array();public function __construct($schema){if(!$schema){$schema=$this->getDefaultSchema();}$this->_schema=$schema;}public function getDefaultSchema(){$ext=App::getInstance()->extension('Database');$schema=$ext->getConfig()->get('db.default_schema') ?: $ext->getSetting(self::DEFAULT_SCHEMA);return $schema;}public function prepare($sql){$type=$this->_serverForSql($sql);$pdo=$this->getPdo($type);return $pdo->prepare($sql);}public function getPdo($type=self::SLAVE){if(isset($this->_connections[$type])){return $this->_connections[$type];}$server=$this->getRandomServer($type);$class=self::getDriverClass();$pdo=new $class($server['dsn'],$server['user'],$server['password']);$pdo->setAttribute($class::ATTR_ERRMODE,$class::ERRMODE_EXCEPTION);$pdo->setAttribute($class::ATTR_CASE,$class::CASE_LOWER);$pdo->setAttribute($class::ATTR_EMULATE_PREPARES,true);$this->_connections[$type]=$pdo;return $this->_connections[$type];}public static function getDriverClass(){$app=App::getInstance();$driver=$app->extension('Database')->getSetting(self::DRIVER);switch ($driver){case self::MYSQL: $class='Sonic\Database\MySql';break;case self::MYSQLI: $class='Sonic\Database\MySqli';break;default: $class='\PDO';break;}return $class;}public function getRandomServer($type){$servers=Database\Factory::getServers($this->_schema);$matching_servers=$weights=array();foreach ($servers as $server){if($server['type']==$type){$matching_servers[]=$server;$weights[]=$server['weight'] ?: 1;}} if(count($matching_servers)==0&&$type==self::SLAVE){return $this->getRandomServer(self::MASTER);}if(count($matching_servers)==0){throw new Database\Exception('no '.$type.' servers found matching schema: '.$this->_schema);}if(count($matching_servers)==1){return $matching_servers[0];}$server_index=Util::getWeightedRandomKey($weights);return $matching_servers[$server_index];}protected function _serverForSql($sql){if($this->_readOrWrite($sql)==self::WRITE){return self::MASTER;}return self::SLAVE;}protected function _readOrWrite($sql){if($this->_isReadQuery($sql)){return self::READ;}return self::WRITE;}protected function _isReadQuery($sql){$bits=explode('*/',$sql);$sql=isset($bits[1]) ? $bits[1] : $bits[0];$sql=trim($sql);return strpos($sql,'SELECT')===0||strpos($sql,'select')===0;}public function getSchema(){if($this->_schema===null){$this->_schema=$this->getDefaultSchema();}return $this->_schema;}} 
}
namespace Sonic\Database\MySql {
    use Sonic\Database\MySql, Sonic\Database\MySql\Exception;
    class Exception extends \Sonic\Exception {} class Statement{protected $_raw_sql;protected $_sql;protected $_link;protected $_result;protected $_fetch_into_class;public function __construct($sql,$link){$this->_raw_sql=$this->_sql=$sql;$this->_link=$link;}public function execute(){$this->_result=mysql_query($this->_sql,$this->_link);if($this->_result===false){throw new Exception(mysql_error());}return $this->_result;}public function getLink(){return $this->_link;}public function bindValue($key,$value){$value="'".mysql_real_escape_string($value,$this->_link)."'";$this->_sql=preg_replace('/'.$key.'\b/',$value,$this->_sql);return $this;}public function fetchAll(){if($this->_fetch_into_class){return $this->_fetchIntoClass($this->_fetch_into_class);}$rows=array();while ($row=mysql_fetch_assoc($this->_result)){$rows[]=$row;}return $rows;}public function fetchObject($class){$row=$this->fetch();if(!$row){return null;}$object=$this->_populateObjectFromRow(new $class,$row);$object->reset();return $object;}protected function _fetchIntoClass($class){$objects=array();while ($row=mysql_fetch_assoc($this->_result)){$object=new $class;$object=$this->_populateObjectFromRow($object,$row);$object->reset();$objects[]=$object;}return $objects;}protected function _populateObjectFromRow($object,$row){foreach ($row as $key=>$value){$object->$key=$value;}return $object;}public function fetch($type=null){switch ($type){case MySql::FETCH_NUM: return mysql_fetch_row($this->_result);default: return mysql_fetch_assoc($this->_result);}} public function setFetchMode($mode,$class){if($mode=MySql::FETCH_CLASS){$this->_fetch_into_class=$class;}} public function columnCount(){return mysql_num_fields($this->_result);}} 
}
namespace Sonic\Database\MySqli {
    use Sonic\Database\MySql, Sonic\Database\MySqli, Sonic\Database\MySqli\Exception;
    class Exception extends MySql\Exception {} class Statement extends MySql\Statement{public function execute($type=MYSQLI_STORE_RESULT){$this->_result=mysqli_query($this->_link,$this->_sql,$type);if($this->_result===false){throw new Exception(mysqli_error($this->_link));}return $this->_result;}public function bindValue($key,$value){$value="'".mysqli_real_escape_string($this->_link,$value)."'";$this->_sql=preg_replace('/'.$key.'\b/',$value,$this->_sql);return $this;}public function fetchAll(){if($this->_fetch_into_class){return $this->_fetchIntoClass($this->_fetch_into_class);}$rows=array();while ($row=mysqli_fetch_assoc($this->_result)){$rows[]=$row;}return $rows;}protected function _fetchIntoClass($class){$objects=array();while ($row=mysqli_fetch_assoc($this->_result)){$object=new $class;$object=$this->_populateObjectFromRow($object,$row);$object->reset();$objects[]=$object;}return $objects;}public function fetch($type=null){switch ($type){case MySqli::FETCH_NUM: return mysqli_fetch_row($this->_result);default: return mysqli_fetch_assoc($this->_result);}} public function columnCount(){return mysqli_num_fields($this->_result);}} 
}
namespace Sonic\Database\Query\Filter {
    class Iterator{protected $_patterns=array();protected $_arrays=array();public function process($rows,$total_weight=null){$filtered_data=array();foreach ($rows as $row){foreach ($this->_patterns as $pattern){if($pattern['comparison']=='FULLTEXT'){$row=$this->_processFullText($row,$pattern,$total_weight);continue;}$value=$row[$pattern['column']];if(!$this->matches($value,$pattern)){continue 2;}} $filtered_data[]=$row;}return $filtered_data;}protected function _processFullText($row,$pattern,$total_weight){if(!isset($row['score'])){$row['score']=0;}$value=$row[$pattern['column']];$other_value=$pattern['value'];$weight=$pattern['args'];if(isset($value[255])||isset($other_value[255])){similar_text($value,$other_value,$percent);$row[$pattern['column'].'_score']=$percent;$row['score'] +=$percent * ($weight / $total_weight);return $row;;}$chars=levenshtein($value,$other_value);$percent=100 * (1 - $chars / max(strlen($value),strlen($other_value)));$row[$pattern['column'].'_score']=$percent;$row['score'] +=$percent * ($weight / $total_weight);return $row;}public function setPatterns(array $patterns){$this->_patterns=$patterns;}public function matches($value,$pattern){$comparison=$pattern['comparison'];$other_value=$pattern['value'];$other_value=str_replace(array('\'','"','`'),'',$other_value);switch ($comparison){case '===': case '==': case '=': return $value==$other_value;break;case '<=': return $value <=$other_value;break;case '>=': return $value >=$other_value;break;case '<>': case '!=': return $value!=$other_value;break;case '<': return $value < $other_value;break;case '>': return $value > $other_value;break;case 'LIKE': return stripos($value,$other_value)!==false;break;case 'NOT IN': return !in_array($value,$this->_getArray($pattern));break;case 'IN': return in_array($value,$this->_getArray($pattern));break;}} protected function _getArray(array $pattern){$cache_key=$pattern['comparison'].$pattern['value'];if(!isset($this->_arrays[$cache_key])){$this->_arrays[$cache_key]=explode(',',$pattern['value']);}return $this->_arrays[$cache_key];}} 
}
namespace Sonic\Database\Query {
    use Sonic\Database\Query, ArrayIterator;
    class Filter{protected $_patterns=array();protected $_total_weight=0;public function addPattern($pattern,$args=null){$this->_patterns[]=$this->_processPattern($pattern,$args);}protected function _processPattern($pattern,$args){$allowed_symbols=array('<=','>=','<>','!=','===','==','<','>','=','NOT IN','LIKE','IN','FULLTEXT');$valid=false;foreach ($allowed_symbols as $symbol){if(strpos($pattern,$symbol)){$valid=true;break;}} if(!$valid){throw new \Sonic\Database\Exception('symbol used for filter must be one of: ' . implode(',',$allowed_symbols));}if($symbol=='FULLTEXT'){$args=$args!==null ? $args : 1;$this->_total_weight +=$args;}$bits=explode($symbol,$pattern);$column=trim(array_shift($bits));$value=trim(implode($symbol,$bits));if(is_numeric($value)){$value=(int) $value;}$filter=array( 'column'=>$column, 'comparison'=>$symbol, 'value'=>$value, 'args'=>$args );return $filter;}public function process(array $rows){$unfiltered=new Filter\Iterator();$unfiltered->setPatterns($this->_patterns);$filtered=$unfiltered->process($rows,$this->_total_weight);return $filtered;}} class Sort{const ASC='ASC';const DESC='DESC';protected $_columns=array();protected $_directions=array();protected $_preserve_data=array();public function add($column,$direction,$preserve_data=false){$this->_columns[]=$column;$this->_directions[]=$direction;$this->_preserve_data[]=$preserve_data;}protected function _process($rows,$column,$direction,$preserve_data){$map=$all_data=array();foreach ($rows as $row){if(!is_array($row)){$map[$row]=$row;continue;}if($preserve_data){$all_data['id:'.$row['id']]=$row;$map['id:'.$row['id']]=$row[$column];continue;}$map[$row['id']]=$row[$column];}natsort($map);if($direction==self::DESC){$map=array_reverse($map,true);}if($preserve_data){$all_data=array_merge($map,$all_data);return array_values($all_data);}return array_keys($map);}public function process($rows){if(count($rows)==0){return array();}if(count($this->_columns)==1){return $this->_process($rows,$this->_columns[0],$this->_directions[0],$this->_preserve_data[0]);}$columns=$directions=array();foreach ($rows as $row){foreach ($this->_columns as $key=>$column){$columns[$key][]=$row[$column];}} $args=array();foreach ($columns as $key=>$column){$$key=$column;$args[]=&$$key;$directions[$key]=$this->_directions[$key]==self::DESC ? SORT_DESC : SORT_ASC;$args[]=&$directions[$key];}$args[]=&$rows;call_user_func_array('array_multisort',$args);return $rows;}} 
}
